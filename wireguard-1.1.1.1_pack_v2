#!/bin/bash

BASE_CONF=/home/$USER/opt/wireguard

mkdir -p $BASE_CONF && cd $BASE_CONF
#!/bin/bash

# Check if running with superuser privileges
if [[ $(id -u) -ne 0 ]]; then                           # Check if the script is being run by root user.
    echo "Please run this script as root or using sudo" # Prompt to run the script again with root user or sudo privileges.
    exit 1
fi

# Set variables
BASE_CONF="/opt/wireguard" # Set a readonly variable for the base directory where the configuration files will be stored.
wgcf_binary=""

# Function to uninstall WireGuard tools
function uninstall_wireguard_tools() {

    if [[ -d "$BASE_CONF/wg-tool/wireguard-tools/src" ]]; then
        set -e
        sudo rm /usr/bin/wg
        sudo rm /usr/share/man/man8/wg.8
        sudo rm /usr/share/bash-completion/completions/wg
        sudo rm /usr/bin/wg-quick
        sudo rm /usr/share/man/man8/wg-quick.8
        sudo rm /usr/share/bash-completion/completions/wg-quick
        sudo rm /lib/systemd/system/wg-quick.target
        sudo rm /lib/systemd/system/wg-quick@.service
        set +e
        echo "WireGuard tools uninstalled successfully."
    else
        echo "WireGuard tools are not installed."
    fi
}

function uninstall_wireguard() {

    # Stop WireGuard if it is currently enabled
    wg-quick down "${BASE_CONF}/wg-keys/wgcf-profile.conf" >/dev/null 2>&1 # Run command to stop the wireguard service.

    uninstall_wireguard_tools

    # Remove binaries and directories
    rm -rf "$BASE_CONF" "/usr/local/bin/wgon" "/usr/local/bin/wgoff" # Delete the directories, binaries and config files.
}

function install_wireguard() {

    # Try 3 times to fetch the latest version from Github
    for i in {1..3}; do
        local lastest_version=$(curl --silent "https://github.com/ViRb3/wgcf/releases" | grep "releases/tag/" | sed 's/.*>v\(.*\)<\/a>.*/\1/p' - | head -n1)

        if [[ -n $lastest_version ]]; then
            echo "Lastest version: $lastest_version"
            break
        else
            echo "Failed to fetch latest version (attempt $i)"
        fi

        if [[ $i -eq 3 ]]; then
            echo "Unable to fetch latest version after 3 attempts. Exiting."
            exit 1
        fi

        sleep 5s
    done

    # Install required packages
    apt install -y git build-essential openresolv

    # Clone WireGuard tools and compile
    mkdir -p "$BASE_CONF/wg-tool" &&
        cd "$BASE_CONF/wg-tool" &&
        git clone https://github.com/WireGuard/wireguard-tools.git &&
        cd wireguard-tools/src &&
        make &&
        make install

    # Generate WireGuard config files

    mkdir -p "$BASE_CONF/wg-keys" &&
        cd "$BASE_CONF/wg-keys" &&
        if [[ $download == true ]]; then
            wgcf_binary="wgcf_${lastest_version}_linux_amd64"

            max_retries=3
            retry_count=0
            while [[ $retry_count -lt $max_retries ]]; do
                if wget "https://github.com/ViRb3/wgcf/releases/download/v${lastest_version}/${wgcf_binary}"; then
                    echo "Downloaded ${wgcf_binary}"
                    break # exit the loop on success
                else
                    echo "Failed to download ${wgcf_binary} - retrying..."
                    ((retry_count++))
                fi
            done

            if [[ $retry_count -ge $max_retries ]]; then
                echo "Max retries reached. Failed to download ${wgcf_binary}" >&2
            fi

        fi

    chmod 600 "${BASE_CONF}/wg-keys/${wgcf_binary}" # Set the permissions of the downloaded binary file as read and write for the owner.
    chmod +x "${BASE_CONF}/wg-keys/${wgcf_binary}"

    command -v "${BASE_CONF}/wg-keys/${wgcf_binary}" >/dev/null 2>&1 || {
        echo >&2 "Error: ${wgcf_binary} is required but not installed. Aborting."
        exit 1
    }

    "${BASE_CONF}/wg-keys/${wgcf_binary}" register # Register a new wgcf account.
    "${BASE_CONF}/wg-keys/${wgcf_binary}" generate # Generate configuration files.
    "${BASE_CONF}/wg-keys/${wgcf_binary}" update   # Update WireGuard connection.
    "${BASE_CONF}/wg-keys/${wgcf_binary}" status   # Get the status of WireGuard connection.
    "${BASE_CONF}/wg-keys/${wgcf_binary}" trace    # Debugging option to collect tracing data.

}

 function  copy_scripts() {

        # Create scripts for starting and stopping WireGuard
        readonly bin="/usr/local/bin" # Set readonly variable for the binary directory.
        cat >"${bin}/wgon" <<EOF      # Define a script named "wgon".
#!/bin/bash

# Check if running with superuser privileges
if [[ \$(id -u) -ne 0 ]]; then   # Check if the script is being run by root user.
    echo "Please run this script as root or using sudo"    # Prompt to run the script again with root user or sudo privileges.
    exit 1
fi

# Ensure required binaries exist
command -v wg-quick >/dev/null 2>&1 || { echo >&2 "Error: wg-quick is required but not installed. Aborting."; exit 1; }
command -v "${BASE_CONF}/wg-keys/${wgcf_binary}" >/dev/null 2>&1 || { echo >&2 "Error: ${wgcf_binary} is required but not installed. Aborting."; exit 1; }

unset http_proxy
unset https_proxy

modprobe ipv6
modprobe wireguard


  if sudo wg show | grep -q "interface"; then
    echo "WireGuard status = 'active'"
    exit 0
  fi

  printf "WireGuard connection attempt\n"

  wg-quick up "/opt/wireguard/wg-keys/wgcf-profile.conf"

  if sudo wg show | grep -q "interface"; then
    echo "WireGuard status = 'active'"
    exit 0
  fi

EOF

        cat >"${bin}/wgoff" <<EOF # Define a script named "wgoff".
#!/bin/bash

# Check if running with superuser privileges
if [[ \$(id -u) -ne 0 ]]; then   # Check if the script is being run by root user.
    echo "Please run this script as root or using sudo"    # Prompt to run the script again with root user or sudo privileges.
    exit 1
fi

unset http_proxy
unset https_proxy
modprobe ipv6
modprobe wireguard

if sudo wg show | grep -q "interface"; then    # Check if WireGuard is already running.
    echo "WireGuard status = 'active'"
    if wg-quick down "/opt/wireguard/wg-keys/wgcf-profile.conf" >/dev/null 2>&1; then
        echo "Successfully stopped WireGuard session."
    else
        echo "Failed to stop WireGuard session."
    fi
else
    echo "WireGuard status = 'disabled'"
fi

EOF

        sudo chmod +x "${bin}/wgon"  # Set the executable permission for the wgon script.
        sudo chmod +x "${bin}/wgoff" # Set the executable permission for the wgoff script.

    echo -e "\nHelper:
wgon to turn WireGuard ON.
wgoff to turn WireGuard OFF.
wgui to launch visual interface
" # Display list of available script commands.
}

    download=true

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
        -v | --version)
            version="$2"
            shift 2
            ;;
        --not-download)
            download=false
            shift
            ;;
        --uninstall)
            uninstall_wireguard
            shift
            ;;
        --copy_scripts)
            copy_scripts
            shift
            ;;
        --install)
            uninstall_wireguard
            install_wireguard
            copy_scripts
            shift
            ;;       
        *)
            echo "Invalid argument: $1"
            exit 1
            ;;
        esac
    done

    echo -e "\nHelper:
--install
    --version       Set manual version download binaries
    --not-download  No download binaries
--copy_scripts      Recopy scripts
--uninstall
\n" # Display list of available script commands.
